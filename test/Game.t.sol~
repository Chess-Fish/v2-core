// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import { Test, console } from "forge-std/Test.sol";
import { GaslessGame } from "../src/GaslessGame.sol";

import { ECDSA } from "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

import { SigUtils } from "./SigUtils.sol";

contract GameTest is Test, SigUtils {
    using ECDSA for bytes32;

    GaslessGame public gaslessGame;

    string mnemonic = "test test test test test test test test test test test junk";

    uint256 privateKey1 = vm.deriveKey(mnemonic, 0);
    uint256 privateKey2 = vm.deriveKey(mnemonic, 1);

    address user1 = vm.addr(privateKey1);
    address user2 = vm.addr(privateKey2);

    uint256 delegatedPrivateKey1 = vm.deriveKey(mnemonic, 3);
    uint256 delegatedPrivateKey2 = vm.deriveKey(mnemonic, 4);

    address delegatedSigner1 = vm.addr(delegatedPrivateKey1);
    address delegatedSigner2 = vm.addr(delegatedPrivateKey2);

    function setUp() public {
        gaslessGame = new GaslessGame(address(0));
    }

    function testDelegation() public {
        // 1) Create Delegation
        GaslessGame.Delegation memory delegation1 =
            GaslessGame.Delegation(user1, delegatedSigner1, address(0));

        bytes32 delegationHash1 =
            getTypedDataHashDelegation(delegation1, address(gaslessGame));

        vm.startPrank(user1);
        bytes memory delegationSig1;
        {
            (uint8 v, bytes32 r, bytes32 s) = vm.sign(privateKey1, delegationHash1);
            delegationSig1 = abi.encodePacked(r, s, v);
        }

        GaslessGame.SignedDelegation memory signedDelegation1 =
            GaslessGame.SignedDelegation(delegation1, delegationSig1);

        bytes memory rawSignedDelegation1 = abi.encode(signedDelegation1);

        gaslessGame.verifyDelegation(rawSignedDelegation1);
        vm.stopPrank();

        // 2) Sign Move with Delegated Address
        uint16[] memory moves1 = new uint16[](1);
        moves1[0] = 1; // first move

        GaslessGame.GaslessMove memory move1 =
            GaslessGame.GaslessMove(address(0), 0, 0, moves1);
        bytes32 movesHash1 = getTypedDataHashMove(move1, address(gaslessGame));
        console.logBytes32(movesHash1);

        vm.startPrank(delegatedSigner1);
        bytes memory signature1;
        {
            (uint8 v, bytes32 r, bytes32 s) = vm.sign(delegatedPrivateKey1, movesHash1);
            signature1 = abi.encodePacked(r, s, v);
        }

        GaslessGame.GaslessMoveData memory moveData1 =
            GaslessGame.GaslessMoveData(move1, signature1);

        gaslessGame.verifyGameViewDelegatedSingle(
            rawSignedDelegation1, abi.encode(moveData1)
        );

        vm.stopPrank();

        // 2) Create Delegation #2
        GaslessGame.Delegation memory delegation2 =
            GaslessGame.Delegation(user2, delegatedSigner2, address(0));

        bytes32 delegationHash2 =
            getTypedDataHashDelegation(delegation2, address(gaslessGame));

        vm.startPrank(user2);
        bytes memory delegationSig2;
        {
            (uint8 v, bytes32 r, bytes32 s) = vm.sign(privateKey2, delegationHash2);
            delegationSig2 = abi.encodePacked(r, s, v);
        }

        GaslessGame.SignedDelegation memory signedDelegation2 =
            GaslessGame.SignedDelegation(delegation2, delegationSig2);

        bytes memory rawSignedDelegation2 = abi.encode(signedDelegation2);

        gaslessGame.verifyDelegation(rawSignedDelegation2);
        vm.stopPrank();

        // 2) Sign Move with Delegated Address
        uint16[] memory moves2 = new uint16[](2);
        moves2[0] = 1; // first move
        moves2[1] = 2;

        GaslessGame.GaslessMove memory move2 =
            GaslessGame.GaslessMove(address(0), 0, 0, moves2);
        bytes32 movesHash2 = getTypedDataHashMove(move2, address(gaslessGame));
        console.logBytes32(movesHash2);

        vm.startPrank(delegatedSigner2);
        bytes memory signature2;
        {
            (uint8 v, bytes32 r, bytes32 s) = vm.sign(delegatedPrivateKey2, movesHash2);
            signature2 = abi.encodePacked(r, s, v);
        }

        GaslessGame.GaslessMoveData memory moveData2 =
            GaslessGame.GaslessMoveData(move2, signature2);

        gaslessGame.verifyGameViewDelegatedSingle(
            rawSignedDelegation2, abi.encode(moveData2)
        );

        vm.stopPrank();

        bytes[2] memory rawSignedDelegations =
            [rawSignedDelegation1, rawSignedDelegation2];

        bytes[2] memory rawMoveData = [abi.encode(moveData1), abi.encode(moveData2)];

        gaslessGame.verifyGameViewDelegated(rawSignedDelegations, rawMoveData);
    }
}
